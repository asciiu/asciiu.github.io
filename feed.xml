<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2019-03-21T17:16:48-06:00</updated><id>/feed.xml</id><title type="html">Developers seeking Entrepreneurship.</title><subtitle>I know who I am! I'm the dude disguised as e dude playing another dude!  </subtitle><entry><title type="html">Choosing Partners</title><link href="/2019/03/21/partnering.html" rel="alternate" type="text/html" title="Choosing Partners" /><published>2019-03-21T00:00:00-06:00</published><updated>2019-03-21T00:00:00-06:00</updated><id>/2019/03/21/partnering</id><content type="html" xml:base="/2019/03/21/partnering.html">&lt;p&gt;Before you go and find yourself other people to team up with on your project I want you to stop and challenge yourself to do as much as you can on your own.&lt;/p&gt;

&lt;p&gt;Shared ideas are one thing, but if this idea is truly your own you really need test this idea out yourself by doing the work. You’re going to be figuring things out on your own anyway as you realize how little work your partner is really doing.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;don’t lean on your other partners&lt;/li&gt;
  &lt;li&gt;you’re going to argue a lot&lt;/li&gt;
  &lt;li&gt;other team members will not work as hard as you&lt;/li&gt;
  &lt;li&gt;Don’t mix friendship with business. Just because you’re good friends with this person does not mean that they are going to be good business partners.&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><summary type="html">Before you go and find yourself other people to team up with on your project I want you to stop and challenge yourself to do as much as you can on your own. Shared ideas are one thing, but if this idea is truly your own you really need test this idea out yourself by doing the work. You’re going to be figuring things out on your own anyway as you realize how little work your partner is really doing. don’t lean on your other partners you’re going to argue a lot other team members will not work as hard as you Don’t mix friendship with business. Just because you’re good friends with this person does not mean that they are going to be good business partners.</summary></entry><entry><title type="html">Solitude</title><link href="/2019/03/15/solitude.html" rel="alternate" type="text/html" title="Solitude" /><published>2019-03-15T00:00:00-06:00</published><updated>2019-03-15T00:00:00-06:00</updated><id>/2019/03/15/solitude</id><content type="html" xml:base="/2019/03/15/solitude.html">&lt;p&gt;If you’re serious about doing the “Thing” don’t talk about it. Don’t tell anyone - no body.&lt;/p&gt;

&lt;p&gt;You need to work in solitude and in silence. Talking about your idea is not going to get you anywhere. Do the work! Talking is what other people do. They do very little when it comes to doing the work. Why? It’s because most people seek validation by talking. It’s your idea. Not theirs. You don’t validation.&lt;/p&gt;

&lt;p&gt;You’re not a talker. You’re a doer. Do the thing and keep your mouth shut. Test your ideas out on your own and when it comes time to talk about the idea with others show them. Show them how it’s going to be and they will follow!&lt;/p&gt;

&lt;p&gt;Followers talk. You’re not a follower. One who knows does not speak; one who speaks does not know.&lt;/p&gt;</content><author><name></name></author><summary type="html">If you’re serious about doing the “Thing” don’t talk about it. Don’t tell anyone - no body. You need to work in solitude and in silence. Talking about your idea is not going to get you anywhere. Do the work! Talking is what other people do. They do very little when it comes to doing the work. Why? It’s because most people seek validation by talking. It’s your idea. Not theirs. You don’t validation. You’re not a talker. You’re a doer. Do the thing and keep your mouth shut. Test your ideas out on your own and when it comes time to talk about the idea with others show them. Show them how it’s going to be and they will follow! Followers talk. You’re not a follower. One who knows does not speak; one who speaks does not know.</summary></entry><entry><title type="html">Do the thing!</title><link href="/2019/03/01/do-it.html" rel="alternate" type="text/html" title="Do the thing!" /><published>2019-03-01T00:00:00-07:00</published><updated>2019-03-01T00:00:00-07:00</updated><id>/2019/03/01/do-it</id><content type="html" xml:base="/2019/03/01/do-it.html">&lt;p&gt;When it comes to programming one can never truly become a master in this craft. If you’re a developer too, I’m sure you can relate. Things are constantly changing; new frameworks, languages, and protocols are born almost everyday while existing technologies die out.&lt;/p&gt;

&lt;p&gt;I think there is an innate part within us all that wants to break out on our own and make the next big thing. If this is you, here are some tips for your journey.&lt;/p&gt;

&lt;h3 id=&quot;stop-over-analyzing-your-work&quot;&gt;Stop over analyzing your work.&lt;/h3&gt;

&lt;p&gt;Do or do not. There is no try. I can’t tell you how much time I have wasted over analyzing things. My best work has always been a result of spontaneity. When I was just starting out my career fresh out college, I spent too much time trying to make my code as elegant and as general as possible. Rather than heading straight to my goal I meandered. I wanted to use all the correct patterns to ensure that my code was
going to perform and be maintainable for all the situations that I was going to encounter. The thing is, most of the situations that I coded for never happened, and I wasted a lot of time over engineering things. The problem with this approach was things are always in a state of change. My beautifully architected code ran into time consuming refactor over time consuming refactor because I kept trying to go after solutions that were outside of the problem domain. If there is anything that I’ve learned it is that you should take care of things as they arise and not waste your time overthinking all the things that are going to go wrong. If you care about your code you should write the code first - a lot of it - before you can critique. It’s called refactoring for a reason. You can’t refactor something that is not there in front of your so stop overthinking your approach and just go for it!&lt;/p&gt;

&lt;h3 id=&quot;learning-new-technologies-is-fun-but-dont-allow-yourself-to-get-lost-down-the-rabbit-hole&quot;&gt;Learning new technologies is fun, but don’t allow yourself to get lost down the rabbit hole.&lt;/h3&gt;

&lt;p&gt;If you’re goal is to release a product and you’ve already put work into it, go the rest of the way using the technology that you started with. I cannot tell you how many times the progress of my projects have suffered because I choose to redo the same work using a new technology because I thought it was going to be better. This is exactly the same thought pattern that was discussed in over analyzing your work. Just get it done with the language and technology that you started with. Go back and redo it in another tech stack if and only if you encounter a problem that another technology is gonig to solve.&lt;/p&gt;

&lt;h3 id=&quot;nobody-cares-how-pretty-your-code-is&quot;&gt;Nobody cares how pretty your code is.&lt;/h3&gt;

&lt;p&gt;At the end of the day, what matters most is if your product works. More importantly, your product needs to generate revenue. As an engineer I like my work to be maintainable and clean. But in all seriousness the users don’t care. They just care the end product. If you want to break out of your engineering cubicle and make it on your own you have to drop the Software Engineer mentality and stop being pedantic about the quality of code that you write. Does the product work? Is it stable and realitvely free of defects? If so, good, move on.&lt;/p&gt;</content><author><name></name></author><summary type="html">When it comes to programming one can never truly become a master in this craft. If you’re a developer too, I’m sure you can relate. Things are constantly changing; new frameworks, languages, and protocols are born almost everyday while existing technologies die out. I think there is an innate part within us all that wants to break out on our own and make the next big thing. If this is you, here are some tips for your journey. Stop over analyzing your work. Do or do not. There is no try. I can’t tell you how much time I have wasted over analyzing things. My best work has always been a result of spontaneity. When I was just starting out my career fresh out college, I spent too much time trying to make my code as elegant and as general as possible. Rather than heading straight to my goal I meandered. I wanted to use all the correct patterns to ensure that my code was going to perform and be maintainable for all the situations that I was going to encounter. The thing is, most of the situations that I coded for never happened, and I wasted a lot of time over engineering things. The problem with this approach was things are always in a state of change. My beautifully architected code ran into time consuming refactor over time consuming refactor because I kept trying to go after solutions that were outside of the problem domain. If there is anything that I’ve learned it is that you should take care of things as they arise and not waste your time overthinking all the things that are going to go wrong. If you care about your code you should write the code first - a lot of it - before you can critique. It’s called refactoring for a reason. You can’t refactor something that is not there in front of your so stop overthinking your approach and just go for it! Learning new technologies is fun, but don’t allow yourself to get lost down the rabbit hole. If you’re goal is to release a product and you’ve already put work into it, go the rest of the way using the technology that you started with. I cannot tell you how many times the progress of my projects have suffered because I choose to redo the same work using a new technology because I thought it was going to be better. This is exactly the same thought pattern that was discussed in over analyzing your work. Just get it done with the language and technology that you started with. Go back and redo it in another tech stack if and only if you encounter a problem that another technology is gonig to solve. Nobody cares how pretty your code is. At the end of the day, what matters most is if your product works. More importantly, your product needs to generate revenue. As an engineer I like my work to be maintainable and clean. But in all seriousness the users don’t care. They just care the end product. If you want to break out of your engineering cubicle and make it on your own you have to drop the Software Engineer mentality and stop being pedantic about the quality of code that you write. Does the product work? Is it stable and realitvely free of defects? If so, good, move on.</summary></entry></feed>